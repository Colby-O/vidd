#ifndef __VIDD_CONFIG_SYNTAX_H__
#define __VIDD_CONFIG_SYNTAX_H__

#define ACTIVE_CLIENT_COLOR BRGB("255", "255", "0") FRGB("0", "0", "0")
#define INACTIVE_CLIENT_COLOR BRGB("120", "120", "120") FRGB("255", "255", "255")

#define SSID_KEYWORD "#"
#define SSID_OPERATOR "+"
#define SSID_MACRO ")"
#define SSID_TYPE "%"
#define SSID_COMMENT "/"
#define SSID_CONST "*"
#define SSID_STRING "\""
#define SSID_CHARACTER_LITERAL "'"
#define SSID_RANGE "~"

#define SCID_KEYWORD '#'
#define SCID_OPERATOR '+'
#define SCID_MACRO ')'
#define SCID_TYPE '%'
#define SCID_COMMENT '/'
#define SCID_CONST '*'
#define SCID_STRING '"'
#define SCID_CHARACTER_LITERAL '\''
#define SCID_RANGE '~'

#define SYNTAX_KEYWORD_COLOR FRGB("255", "255", "0")
#define SYNTAX_OPERATOR_COLOR FRGB("255", "255", "0")
#define SYNTAX_MACRO_COLOR FRGB("0", "255", "255")
#define SYNTAX_TYPE_COLOR FRGB("255", "0", "0")
#define SYNTAX_STRING_COLOR FRGB("255", "0", "255")
#define SYNTAX_COMMENT_COLOR STYLE_ITALIC FRGB("0", "0", "255")
#define SYNTAX_CONST_COLOR STYLE_ITALIC FRGB("0", "255", "255")
#define SYNTAX_CHARACTER_LITERAL_COLOR FRGB("155", "100", "0")
#define SYNTAX_NUMBER_COLOR FRGB("0", "255", "0")

char* SYNTAX_COLORS[] = {
	[SCID_KEYWORD]=SYNTAX_KEYWORD_COLOR,
	[SCID_OPERATOR]=SYNTAX_OPERATOR_COLOR,
	[SCID_MACRO]=SYNTAX_MACRO_COLOR,
	[SCID_TYPE]=SYNTAX_TYPE_COLOR,
	[SCID_COMMENT]=SYNTAX_COMMENT_COLOR,
	[SCID_CONST]=SYNTAX_CONST_COLOR,
	[SCID_STRING]=SYNTAX_STRING_COLOR,
	[SCID_CHARACTER_LITERAL]=SYNTAX_CHARACTER_LITERAL_COLOR,
};

#define SYNTAXES_ADD(syntax) \
	(char**)syntax,

#define SYNTAX_NEW(name) \
	char* name[] = {
#define SYNTAX_EXT_COUNT(count) \
	(char*)count,
#define SYNTAX_ADD_EXT(ext) \
	ext,
#define SYNTAX_ADD(name) \
	name,
#define SYNTAX_ADD_RANGE(start, end) \
	SSID_RANGE start "\0" end,
#define SYNTAX_END(name) \
	0 };

SYNTAX_NEW(syntax_c)
	SYNTAX_EXT_COUNT(2)
	SYNTAX_ADD_EXT(".c")
	SYNTAX_ADD_EXT(".h")
	SYNTAX_ADD(SSID_KEYWORD "if")
	SYNTAX_ADD(SSID_KEYWORD "break")
	SYNTAX_ADD(SSID_KEYWORD "else")
	SYNTAX_ADD(SSID_KEYWORD "for")
	SYNTAX_ADD(SSID_KEYWORD "while")
	SYNTAX_ADD(SSID_KEYWORD "do")
	SYNTAX_ADD(SSID_KEYWORD "continue")
	SYNTAX_ADD(SSID_KEYWORD "switch")
	SYNTAX_ADD(SSID_KEYWORD "case")
	SYNTAX_ADD(SSID_KEYWORD "default")
	SYNTAX_ADD(SSID_KEYWORD "sizeof")
	SYNTAX_ADD(SSID_KEYWORD "return")
	SYNTAX_ADD(SSID_TYPE "struct")
	SYNTAX_ADD(SSID_TYPE "typedef")
	SYNTAX_ADD(SSID_TYPE "enum")
	SYNTAX_ADD(SSID_TYPE "register")
	SYNTAX_ADD(SSID_TYPE "static")
	SYNTAX_ADD(SSID_TYPE "const")
	SYNTAX_ADD(SSID_TYPE "extern")
	SYNTAX_ADD(SSID_TYPE "void")
	SYNTAX_ADD(SSID_TYPE "char")
	SYNTAX_ADD(SSID_TYPE "byte")
	SYNTAX_ADD(SSID_TYPE "bool")
	SYNTAX_ADD(SSID_TYPE "short")
	SYNTAX_ADD(SSID_TYPE "int")
	SYNTAX_ADD(SSID_TYPE "long")
	SYNTAX_ADD(SSID_TYPE "float")
	SYNTAX_ADD(SSID_TYPE "double")
	SYNTAX_ADD(SSID_TYPE "signed")
	SYNTAX_ADD(SSID_TYPE "unsigned")
	SYNTAX_ADD(SSID_TYPE "size_t")
	SYNTAX_ADD(SSID_TYPE "wchar_t")
	SYNTAX_ADD(SSID_TYPE "char8_t")
	SYNTAX_ADD(SSID_TYPE "char16_t")
	SYNTAX_ADD(SSID_TYPE "char32_t")
	SYNTAX_ADD(SSID_TYPE "int8_t")
	SYNTAX_ADD(SSID_TYPE "int16_t")
	SYNTAX_ADD(SSID_TYPE "int32_t")
	SYNTAX_ADD(SSID_TYPE "int64_t")
	SYNTAX_ADD(SSID_TYPE "uint8_t")
	SYNTAX_ADD(SSID_TYPE "uint16_t")
	SYNTAX_ADD(SSID_TYPE "uint32_t")
	SYNTAX_ADD(SSID_TYPE "uint64_t")
	SYNTAX_ADD(SSID_TYPE "uintmax_t")
	SYNTAX_ADD(SSID_TYPE "intmax_t")
	SYNTAX_ADD(SSID_TYPE "FILE")
	SYNTAX_ADD(SSID_CONST "true")
	SYNTAX_ADD(SSID_CONST "false")
	SYNTAX_ADD_RANGE(SSID_COMMENT "//", "\0")
	SYNTAX_ADD_RANGE(SSID_COMMENT "/*", "*/")
	SYNTAX_ADD_RANGE(SSID_MACRO "#", "\0")
	SYNTAX_ADD_RANGE(SSID_STRING "\"", "\"")
	SYNTAX_ADD_RANGE(SSID_CHARACTER_LITERAL "'", "'")
	SYNTAX_ADD(SSID_OPERATOR "=")
	SYNTAX_ADD(SSID_OPERATOR "!")
	SYNTAX_ADD(SSID_OPERATOR "+")
	SYNTAX_ADD(SSID_OPERATOR "-")
	SYNTAX_ADD(SSID_OPERATOR "*")
	SYNTAX_ADD(SSID_OPERATOR "/")
	SYNTAX_ADD(SSID_OPERATOR "~")
SYNTAX_END(syntax_c)

SYNTAX_NEW(syntax_cpp)
	SYNTAX_EXT_COUNT(4)
	SYNTAX_ADD_EXT(".cpp")
	SYNTAX_ADD_EXT(".cc")
	SYNTAX_ADD_EXT(".cxx")
	SYNTAX_ADD_EXT(".hpp")
	SYNTAX_ADD(SSID_KEYWORD "if")
	SYNTAX_ADD(SSID_KEYWORD "break")
	SYNTAX_ADD(SSID_KEYWORD "else")
	SYNTAX_ADD(SSID_KEYWORD "for")
	SYNTAX_ADD(SSID_KEYWORD "continue")
	SYNTAX_ADD(SSID_KEYWORD "while")
	SYNTAX_ADD(SSID_KEYWORD "do")
	SYNTAX_ADD(SSID_KEYWORD "switch")
	SYNTAX_ADD(SSID_KEYWORD "case")
	SYNTAX_ADD(SSID_KEYWORD "default")
	SYNTAX_ADD(SSID_KEYWORD "sizeof")
	SYNTAX_ADD(SSID_KEYWORD "return")
	SYNTAX_ADD(SSID_KEYWORD "using")
	SYNTAX_ADD(SSID_KEYWORD "try")
	SYNTAX_ADD(SSID_KEYWORD "catch")
	SYNTAX_ADD(SSID_KEYWORD "new")
	SYNTAX_ADD(SSID_KEYWORD "delete")
	SYNTAX_ADD(SSID_KEYWORD "dynamic_cast")
	SYNTAX_ADD(SSID_KEYWORD "static_cast")
	SYNTAX_ADD(SSID_KEYWORD "const_cast")
	SYNTAX_ADD(SSID_KEYWORD "this")
	SYNTAX_ADD(SSID_TYPE "constexpr")
	SYNTAX_ADD(SSID_TYPE "consteval")
	SYNTAX_ADD(SSID_TYPE "concept")
	SYNTAX_ADD(SSID_TYPE "struct")
	SYNTAX_ADD(SSID_TYPE "class")
	SYNTAX_ADD(SSID_TYPE "namespace")
	SYNTAX_ADD(SSID_TYPE "template")
	SYNTAX_ADD(SSID_TYPE "typename")
	SYNTAX_ADD(SSID_TYPE "typedef")
	SYNTAX_ADD(SSID_TYPE "enum")
	SYNTAX_ADD(SSID_TYPE "register")
	SYNTAX_ADD(SSID_TYPE "static")
	SYNTAX_ADD(SSID_TYPE "const")
	SYNTAX_ADD(SSID_TYPE "extern")
	SYNTAX_ADD(SSID_TYPE "void")
	SYNTAX_ADD(SSID_TYPE "char")
	SYNTAX_ADD(SSID_TYPE "byte")
	SYNTAX_ADD(SSID_TYPE "bool")
	SYNTAX_ADD(SSID_TYPE "short")
	SYNTAX_ADD(SSID_TYPE "int")
	SYNTAX_ADD(SSID_TYPE "long")
	SYNTAX_ADD(SSID_TYPE "float")
	SYNTAX_ADD(SSID_TYPE "double")
	SYNTAX_ADD(SSID_TYPE "signed")
	SYNTAX_ADD(SSID_TYPE "unsigned")
	SYNTAX_ADD(SSID_TYPE "size_t")
	SYNTAX_ADD(SSID_TYPE "wchar_t")
	SYNTAX_ADD(SSID_TYPE "char8_t")
	SYNTAX_ADD(SSID_TYPE "char16_t")
	SYNTAX_ADD(SSID_TYPE "char32_t")
	SYNTAX_ADD(SSID_TYPE "int8_t")
	SYNTAX_ADD(SSID_TYPE "int16_t")
	SYNTAX_ADD(SSID_TYPE "int32_t")
	SYNTAX_ADD(SSID_TYPE "int64_t")
	SYNTAX_ADD(SSID_TYPE "uint8_t")
	SYNTAX_ADD(SSID_TYPE "uint16_t")
	SYNTAX_ADD(SSID_TYPE "uint32_t")
	SYNTAX_ADD(SSID_TYPE "uint64_t")
	SYNTAX_ADD(SSID_TYPE "uintmax_t")
	SYNTAX_ADD(SSID_TYPE "intmax_t")
	SYNTAX_ADD(SSID_TYPE "FILE")
	SYNTAX_ADD(SSID_CONST "true")
	SYNTAX_ADD(SSID_CONST "false")
	SYNTAX_ADD_RANGE(SSID_COMMENT "//", "\0")
	SYNTAX_ADD_RANGE(SSID_COMMENT "/*", "*/")
	SYNTAX_ADD_RANGE(SSID_MACRO "#", "\0")
	SYNTAX_ADD_RANGE(SSID_STRING "\"", "\"")
	SYNTAX_ADD_RANGE(SSID_CHARACTER_LITERAL "'", "'")
	SYNTAX_ADD(SSID_OPERATOR "=")
	SYNTAX_ADD(SSID_OPERATOR "!")
	SYNTAX_ADD(SSID_OPERATOR "+")
	SYNTAX_ADD(SSID_OPERATOR "-")
	SYNTAX_ADD(SSID_OPERATOR "*")
	SYNTAX_ADD(SSID_OPERATOR "/")
	SYNTAX_ADD(SSID_OPERATOR "~")
SYNTAX_END(syntax_cpp)

SYNTAX_NEW(syntax_py)
	SYNTAX_EXT_COUNT(1)
	SYNTAX_ADD_EXT(".py")
	SYNTAX_ADD(SSID_KEYWORD "if")
	SYNTAX_ADD(SSID_KEYWORD "with")
	SYNTAX_ADD(SSID_KEYWORD "in")
	SYNTAX_ADD(SSID_KEYWORD "is")
	SYNTAX_ADD(SSID_KEYWORD "as")
	SYNTAX_ADD(SSID_KEYWORD "and")
	SYNTAX_ADD(SSID_KEYWORD "or")
	SYNTAX_ADD(SSID_KEYWORD "not")
	SYNTAX_ADD(SSID_KEYWORD "lambda")
	SYNTAX_ADD(SSID_KEYWORD "break")
	SYNTAX_ADD(SSID_KEYWORD "assert")
	SYNTAX_ADD(SSID_KEYWORD "continue")
	SYNTAX_ADD(SSID_KEYWORD "else")
	SYNTAX_ADD(SSID_KEYWORD "elif")
	SYNTAX_ADD(SSID_KEYWORD "for")
	SYNTAX_ADD(SSID_KEYWORD "while")
	SYNTAX_ADD(SSID_KEYWORD "return")
	SYNTAX_ADD(SSID_KEYWORD "try")
	SYNTAX_ADD(SSID_KEYWORD "catch")
	SYNTAX_ADD(SSID_KEYWORD "except")
	SYNTAX_ADD(SSID_KEYWORD "finally")
	SYNTAX_ADD(SSID_KEYWORD "yield")
	SYNTAX_ADD(SSID_KEYWORD "def")
	SYNTAX_ADD(SSID_KEYWORD "pass")
	SYNTAX_ADD(SSID_KEYWORD "raise")
	SYNTAX_ADD(SSID_KEYWORD "del")
	SYNTAX_ADD(SSID_KEYWORD "global")
	SYNTAX_ADD(SSID_KEYWORD "nonlocal")
	SYNTAX_ADD(SSID_KEYWORD "class")
	SYNTAX_ADD(SSID_TYPE "bool")
	SYNTAX_ADD(SSID_TYPE "int")
	SYNTAX_ADD(SSID_TYPE "float")
	SYNTAX_ADD(SSID_TYPE "len")
	SYNTAX_ADD(SSID_TYPE "open")
	SYNTAX_ADD(SSID_CONST "True")
	SYNTAX_ADD(SSID_CONST "False")
	SYNTAX_ADD(SSID_CONST "None")
	SYNTAX_ADD(SSID_MACRO "import")
	SYNTAX_ADD(SSID_MACRO "from")
	SYNTAX_ADD_RANGE(SSID_COMMENT "#", "\0")
	SYNTAX_ADD_RANGE(SSID_COMMENT "\"\"\"", "\"\"\"")
	SYNTAX_ADD_RANGE(SSID_STRING "\"", "\"")
	SYNTAX_ADD_RANGE(SSID_CHARACTER_LITERAL "'", "'")
	SYNTAX_ADD(SSID_OPERATOR "=")
	SYNTAX_ADD(SSID_OPERATOR "!")
	SYNTAX_ADD(SSID_OPERATOR "+")
	SYNTAX_ADD(SSID_OPERATOR "-")
	SYNTAX_ADD(SSID_OPERATOR "*")
	SYNTAX_ADD(SSID_OPERATOR "/")
	SYNTAX_ADD(SSID_OPERATOR "~")
SYNTAX_END(syntax_py)

SYNTAX_NEW(syntax_js)
	SYNTAX_EXT_COUNT(1)
	SYNTAX_ADD_EXT(".js")
	SYNTAX_ADD(SSID_KEYWORD "if")
	SYNTAX_ADD(SSID_KEYWORD "class")
	SYNTAX_ADD(SSID_KEYWORD "abstract")
	SYNTAX_ADD(SSID_KEYWORD "arguments")
	SYNTAX_ADD(SSID_KEYWORD "boolean")
	SYNTAX_ADD(SSID_KEYWORD "break")
	SYNTAX_ADD(SSID_KEYWORD "byte")
	SYNTAX_ADD(SSID_KEYWORD "case")
	SYNTAX_ADD(SSID_KEYWORD "catch")
	SYNTAX_ADD(SSID_KEYWORD "char")
	SYNTAX_ADD(SSID_KEYWORD "const")
	SYNTAX_ADD(SSID_KEYWORD "continue")
	SYNTAX_ADD(SSID_KEYWORD "debugger")
	SYNTAX_ADD(SSID_KEYWORD "default")
	SYNTAX_ADD(SSID_KEYWORD "delete")
	SYNTAX_ADD(SSID_KEYWORD "do")
	SYNTAX_ADD(SSID_KEYWORD "double")
	SYNTAX_ADD(SSID_KEYWORD "else")
	SYNTAX_ADD(SSID_KEYWORD "eval")
	SYNTAX_ADD(SSID_KEYWORD "final")
	SYNTAX_ADD(SSID_KEYWORD "finally")
	SYNTAX_ADD(SSID_KEYWORD "float")
	SYNTAX_ADD(SSID_KEYWORD "for")
	SYNTAX_ADD(SSID_KEYWORD "function")
	SYNTAX_ADD(SSID_KEYWORD "goto")
	SYNTAX_ADD(SSID_KEYWORD "implements")
	SYNTAX_ADD(SSID_KEYWORD "in")
	SYNTAX_ADD(SSID_KEYWORD "instanceof")
	SYNTAX_ADD(SSID_KEYWORD "int")
	SYNTAX_ADD(SSID_KEYWORD "interface")
	SYNTAX_ADD(SSID_KEYWORD "long")
	SYNTAX_ADD(SSID_KEYWORD "native")
	SYNTAX_ADD(SSID_KEYWORD "new")
	SYNTAX_ADD(SSID_KEYWORD "package")
	SYNTAX_ADD(SSID_KEYWORD "private")
	SYNTAX_ADD(SSID_KEYWORD "protected")
	SYNTAX_ADD(SSID_KEYWORD "public")
	SYNTAX_ADD(SSID_KEYWORD "return")
	SYNTAX_ADD(SSID_KEYWORD "short")
	SYNTAX_ADD(SSID_KEYWORD "static")
	SYNTAX_ADD(SSID_KEYWORD "switch")
	SYNTAX_ADD(SSID_KEYWORD "synchronized")
	SYNTAX_ADD(SSID_KEYWORD "this")
	SYNTAX_ADD(SSID_KEYWORD "throw")
	SYNTAX_ADD(SSID_KEYWORD "throws")
	SYNTAX_ADD(SSID_KEYWORD "transient")
	SYNTAX_ADD(SSID_KEYWORD "try")
	SYNTAX_ADD(SSID_KEYWORD "typeof")
	SYNTAX_ADD(SSID_KEYWORD "void")
	SYNTAX_ADD(SSID_KEYWORD "volatile")
	SYNTAX_ADD(SSID_KEYWORD "while")
	SYNTAX_ADD(SSID_KEYWORD "with")
	SYNTAX_ADD(SSID_KEYWORD "yield")
	SYNTAX_ADD(SSID_KEYWORD "import")
	SYNTAX_ADD(SSID_KEYWORD "from")
	SYNTAX_ADD(SSID_TYPE "let")
	SYNTAX_ADD(SSID_TYPE "var")
	SYNTAX_ADD(SSID_CONST "true")
	SYNTAX_ADD(SSID_CONST "false")
	SYNTAX_ADD(SSID_CONST "null")
	SYNTAX_ADD_RANGE(SSID_COMMENT "//", "\0")
	SYNTAX_ADD_RANGE(SSID_COMMENT "/*", "*/")
	SYNTAX_ADD_RANGE(SSID_STRING "\"", "\"")
	SYNTAX_ADD_RANGE(SSID_CHARACTER_LITERAL "'", "'")
	SYNTAX_ADD(SSID_OPERATOR "=")
	SYNTAX_ADD(SSID_OPERATOR "!")
	SYNTAX_ADD(SSID_OPERATOR "+")
	SYNTAX_ADD(SSID_OPERATOR "-")
	SYNTAX_ADD(SSID_OPERATOR "*")
	SYNTAX_ADD(SSID_OPERATOR "/")
	SYNTAX_ADD(SSID_OPERATOR "~")
SYNTAX_END(syntax_js)



char** syntaxes[] = {
	SYNTAXES_ADD(syntax_c)
	SYNTAXES_ADD(syntax_cpp)
	SYNTAXES_ADD(syntax_py)
	SYNTAXES_ADD(syntax_js)
};

#endif
